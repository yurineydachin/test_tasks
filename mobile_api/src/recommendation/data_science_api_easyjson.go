// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package recommendation_service

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3c04d0eDecodeMobileSearchApiSrvRecommendation(in *jlexer.Lexer, out *RecommendedByDataSceinceResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if !in.IsDelim(']') {
			*out = make(RecommendedByDataSceinceResponse, 0, 1)
		} else {
			*out = RecommendedByDataSceinceResponse{}
		}
		for !in.IsDelim(']') {
			var v1 RecommendationByDataSceince
			easyjson3c04d0eDecodeMobileSearchApiSrvRecommendation1(in, &v1)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c04d0eEncodeMobileSearchApiSrvRecommendation(out *jwriter.Writer, in RecommendedByDataSceinceResponse) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			easyjson3c04d0eEncodeMobileSearchApiSrvRecommendation1(out, v3)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v RecommendedByDataSceinceResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3c04d0eEncodeMobileSearchApiSrvRecommendation(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RecommendedByDataSceinceResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3c04d0eEncodeMobileSearchApiSrvRecommendation(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RecommendedByDataSceinceResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3c04d0eDecodeMobileSearchApiSrvRecommendation(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RecommendedByDataSceinceResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3c04d0eDecodeMobileSearchApiSrvRecommendation(l, v)
}
func easyjson3c04d0eDecodeMobileSearchApiSrvRecommendation1(in *jlexer.Lexer, out *RecommendationByDataSceince) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "placement_name":
			out.Placement = string(in.String())
		case "strat_message":
			out.Heading = string(in.String())
		case "recs":
			if in.IsNull() {
				in.Skip()
				out.Products = nil
			} else {
				in.Delim('[')
				if !in.IsDelim(']') {
					out.Products = make([]ProductByByDataSceince, 0, 2)
				} else {
					out.Products = []ProductByByDataSceince{}
				}
				for !in.IsDelim(']') {
					var v4 ProductByByDataSceince
					easyjson3c04d0eDecodeMobileSearchApiSrvRecommendation2(in, &v4)
					out.Products = append(out.Products, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c04d0eEncodeMobileSearchApiSrvRecommendation1(out *jwriter.Writer, in RecommendationByDataSceince) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"placement_name\":")
	out.String(string(in.Placement))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"strat_message\":")
	out.String(string(in.Heading))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"recs\":")
	if in.Products == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in.Products {
			if v5 > 0 {
				out.RawByte(',')
			}
			easyjson3c04d0eEncodeMobileSearchApiSrvRecommendation2(out, v6)
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}
func easyjson3c04d0eDecodeMobileSearchApiSrvRecommendation2(in *jlexer.Lexer, out *ProductByByDataSceince) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pid":
			out.SKU = string(in.String())
		case "ct_url":
			out.CtURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3c04d0eEncodeMobileSearchApiSrvRecommendation2(out *jwriter.Writer, in ProductByByDataSceince) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pid\":")
	out.String(string(in.SKU))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ct_url\":")
	out.String(string(in.CtURL))
	out.RawByte('}')
}
